#
# Time : O(N); Space: O(1)
# @tag : Hashing
# @by  : Shaikat Majumdar
# @date: Aug 27, 2020
# **************************************************************************
# LeetCode - Problem - 389: Find the difference
#
# Description:
#
# You are given two strings s and t.
#
# String t is generated by random shuffling string s and then add one more letter at a random position.
#
# Return the letter that was added to t.
#
#
#
# Example 1:
#
# Input: s = "abcd", t = "abcde"
# Output: "e"
# Explanation: 'e' is the letter that was added.
# Example 2:
#
# Input: s = "", t = "y"
# Output: "y"
# Example 3:
#
# Input: s = "a", t = "aa"
# Output: "a"
# Example 4:
#
# Input: s = "ae", t = "aea"
# Output: "a"
#
#
# Constraints:
#
#   * 0 <= s.length <= 1000
#   * t.length == s.length + 1
#   * s and t consist of lower-case English letters.
#
# **************************************************************************
# Source: https://leetcode.com/problems/find-the-difference/ (Leetcode - Problem 389 - Find the Difference)
#         https://practice.geeksforgeeks.org/problems/uncommon-characters4932/1 (GeeksForGeeks - Uncommon characters)
#
import collections

import unittest


class Solution:
    # This is a chance in the interview to display your knowledge of the Python language and
    # present multiple solutions with their tradeoffs.

    # Method 1 : Counter Subtract
    # | O(T): O(n+m) | O(S): O(m+n) | Rt: 32ms |
    #
    # note: well, the time complexity could be O(n) depends on how will you interpret it
    def findTheDifferenceMethodOne(self, s: str, t: str) -> str:
        ct = collections.Counter
        return next(iter(ct(t) - ct(s)))
        # The below commented out line - works as well -- but significantly slower (| Rt: 44ms |).
        # return list(ct(t) - ct(s))[0]

    # Method 2 : One Dict
    # | O(T): O(n+m) | O(S): O(n) | Rt: 52ms |
    def findTheDifferenceMethodTwo(self, s: str, t: str) -> str:
        dt = {}
        for i in s:
            dt[i] = dt.get(i, 0) + 1
        for i in t:
            dt[i] = dt.get(i, 0) - 1
            if dt[i] < 0:
                return i
        return

    # Method 3 : Limited State
    # | O(T): O(n + m) | O(S): O(1) | Rt: 36ms |
    def findTheDifferenceMethodThree(self, s: str, t: str) -> str:
        base, a = ord("a"), [0] * 26
        for i in s:
            a[ord(i) - base] += 1
        for i in t:
            ind = ord(i) - base
            if a[ind] <= 0:
                return i
            a[ind] -= 1

    # Method 4 : Count
    # | O(T): O(n * (n + m)) | O(S): O(1) | Rt: 24ms |
    def findTheDifferenceMethodFour(self, s: str, t: str) -> str:
        return next(i for i in t if t.count(i) > s.count(i))

    # Method 5 : XOR
    # | O(T): O(m+n) | O(S): O(m+n) | Rt: 24ms |
    def findTheDifferenceMethodFive(self, s: str, t: str) -> str:
        xor = 0
        for i in s + t:
            xor ^= ord(i)
        return chr(xor)

    # Method 6 : XOR - transfer this problem to a "find unique" problem. Very good solution. Alternative to save space.
    # | O(T): O(n) | O(S): O(1) | Rt: 48ms |
    def findTheDifferenceMethodSix(self, s: str, t: str) -> str:
        xor = 0
        for i, v in enumerate(s):
            xor ^= ord(v)
            xor ^= ord(t[i])
        xor ^= ord(t[-1])
        return chr(xor)

    # Method 7 : Sum Diff
    # | O(T): O(m+n) | O(S): O(m+n) | Rt: 24ms |
    def findTheDifferenceMethodSeven(self, s: str, t: str) -> str:
        return chr(sum(map(ord, t)) - sum(map(ord, s)))


class Test(unittest.TestCase):
    def setUp(self) -> None:
        pass

    def tearDown(self) -> None:
        pass

    def test_findTheDifference(self) -> None:
        sol = Solution()

        def test_findTheDifference(self) -> None:
            sol = Solution()
            for s, t, solution in (
                ["geeksforgeeks", "geeksquiz", "fioqruz"],
                ["characters", "alphabets", "bclpr"],
                ["abcd", "abcde", "e"],
                ["", "y", "y"],
                ["a", "aa", "a"],
                ["ae", "aea", "a"],
            ):
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodOne(s, t),
                    "Should return the difference between the two strings",
                )
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodTwo(s, t),
                    "Should return the difference between the two strings",
                )
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodThree(s, t),
                    "Should return the difference between the two strings",
                )
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodFour(s, t),
                    "Should return the difference between the two strings",
                )
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodFive(s, t),
                    "Should return the difference between the two strings",
                )
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodSix(s, t),
                    "Should return the difference between the two strings",
                )
                self.assertEqual(
                    solution,
                    sol.findTheDifferenceMethodSeven(s, t),
                    "Should return the difference between the two strings",
                )


if __name__ == "__main__":
    unittest.main()
